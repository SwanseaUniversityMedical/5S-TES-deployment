version: '3.7'

services:

######################################################
# TRE Proxy
######################################################

  nginx-dare:
    image: nginx:latest
    container_name: nginx_dare
    ports:
      - 9999:80
    networks:
      - sub-net
    depends_on:
      - DataEgressUI
      - DataEgressAPI
      - tre-ui
      - tre-api
    volumes:
      - ./default.conf:/etc/nginx/conf.d/default.conf

######################################################
# TRE LAYER
######################################################

  tre-ui:
    platform: linux/x86_64
    image: harbor.ukserp.ac.uk:443/dare-trefx/control-tre-ui:${dareVer}
    container_name: treUI
    restart: always
    networks:
      - sub-net
    ports:
      - 8989:80
    depends_on:
      - tre-api
    environment:
      - TreAPISettings__Address=http://treAPI
      - Serilog__SeqServerUrl=http://seq:5341
      - DemoMode=${DemoMode}
      - KeyCloakDemoMode=${KeyCloakDemoMode}
      - TreKeyCloakSettings__Authority=${TreKeyCloakAuthority}
      - TreKeyCloakSettings__MetadataAddress=${TreKeyCloakMetadataAddress}
      - TreKeyCloakSettings__BaseUrl=${TreKeyCloakBaseRealmAddress}
      - TreKeyCloakSettings__ClientId=${TreKeyCloakClientId}
      - TreKeyCloakSettings__ClientSecret=${TreKeyCloakSecret}
      - TreKeyCloakSettings__ValidAudiences=${TreValidAudiences}
      - TreKeyCloakSettings__Proxy=${useproxy}
      - TreKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - sslcookies=${sslcookies}
      - httpsRedirect=${httpsRedirect}
      - TreKeyCloakSettings__AccountManagementURL=${TreAccountManagementURLUI}
      - TreKeyCloakSettings__BypassProxy="treAPI,seq-tre"
      - TreKeyCloakSettings__TokenExpiredAddress=${TreKeyCloakTokenExpiredAddressUI}
      - TreKeyCloakSettings__UseRedirectURL=${TreKeyCloakUseRedirect}
      - TreKeyCloakSettings__RedirectURL=${TreKeyCloakClientUIRedirectURL}


  tre-api:
    platform: linux/x86_64
    image: harbor.ukserp.ac.uk:443/dare-trefx/control-tre-api:${dareVer}
    container_name: treapi
    restart: always
    networks:
      - sub-net
     # - engine-tre

    ports:
      - 8072:80
    depends_on:
      postgresql:
        condition: service_healthy
      keycloak:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - DemoMode=${DemoMode}
      - KeyCloakDemoMode=${KeyCloakDemoMode}
      - DemoModeDefaultP=password123
      - ConnectionStrings__DefaultConnection=Server=postgres;Port=5432;Database=DARE-Tre;Include Error Detail=true;User Id=${PGLOGIN};Password=${PGPASSWORD};TrustServerCertificate=True;
      - ConnectionStrings__CredentialsConnection=Server=postgres;Port=5432;Database=CredentialsConnection;Include Error Detail=true;User Id=${PGLOGIN};Password=${PGPASSWORD};TrustServerCertificate=True;
      - RabbitMQ__HostAddress=rabbitmq
      - Serilog__SeqServerUrl=http://seq:5341
      - DareAPISettings__Address=${SubmissionAPIAddressURL}
      - DataEgressAPISettings__Address=https://egressAPI
      - EnableExternalHangfire=${EnableExternalHangfire}
      - IgnoreHutchSSL=${IgnoreHutchSSL}
      - TreKeyCloakSettings__Authority=${TreKeyCloakAuthority}
      - TreKeyCloakSettings__MetadataAddress=${TreKeyCloakMetadataAddress}
      - TreKeyCloakSettings__BaseUrl=${TreKeyCloakBaseRealmAddress}
      - TreKeyCloakSettings__ClientId=${TreKeyCloakClientId}
      - TreKeyCloakSettings__ClientSecret=${TreKeyCloakSecret}
      - TreKeyCloakSettings__ValidAudiences=${TreValidAudiences}
      - TreKeyCloakSettings__Proxy=${useproxy}
      - EnableExternalHangfire=true
      - TreKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - TreKeyCloakSettings__BypassProxy="treAPI,seq-tre"
      - TreKeyCloakSettings__TokenExpiredAddress=${TreKeyCloakTokenExpiredAddressUI}
      - TreKeyCloakSettings__UseRedirectURL=${TreKeyCloakUseRedirect}
      - TreKeyCloakSettings__RedirectURL=${TreKeyCloakClientUIRedirectURL}
      - DataEgressKeyCloakSettings__Authority=${EgressKeyCloakAuthority}
      - DataEgressKeyCloakSettings__MetadataAddress=${EgressKeyCloakMetadataAddress}
      - DataEgressKeyCloakSettings__BaseUrl=${EgressKeyCloakBaseRealmAddress}
      - DataEgressKeyCloakSettings__ClientId=${EgressKeyCloakClientID}
      - DataEgressKeyCloakSettings__ClientSecret=${EgressKeyCloakSecret}
      - DataEgressKeyCloakSettings__ValidAudiences=${EgressValidAudiences}
      - DataEgressKeyCloakSettings__Proxy=${useproxy}
      - DataEgressKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - DataEgressKeyCloakSettings__BypassProxy="DataEgressUI,treAPI,seq-tre"
      - DataEgressKeyCloakSettings__TokenExpiredAddress=${EgressKeyCloakTokenExpiredAddressUI}
      - DataEgressKeyCloakSettings__UseRedirectURL=${EgressKeyCloakUseRedirect}
      - DataEgressKeyCloakSettings__RedirectURL=${EgressKeyCloakClientUIRedirectURL}
      - SubmissionKeyCloakSettings__Authority=${SubmissionAPIKeyCloakAuthority}
      - SubmissionKeyCloakSettings__MetadataAddress=${SubmissionAPIKeyCloakMetadataAddress}
      - SubmissionKeyCloakSettings__BaseUrl=${SubmissionAPIKeyCloakBaseRealmAddress}
      - SubmissionKeyCloakSettings__ClientId=${SubmissionAPIKeyCloakClientId}
      - SubmissionKeyCloakSettings__ClientSecret=${SubmissionAPIKeyCloakSecret}
      - SubmissionKeyCloakSettings__ValidAudiences=${SubmissionAPIValidAudiences}
      - SubmissionKeyCloakSettings__Proxy=${useproxy}
      - SubmissionKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - SubmissionKeyCloakSettings__BypassProxy="treAPI,seq-tre"
      - SubmissionKeyCloakSettings__TokenExpiredAddress=${SubmissionAPIKeyCloakTokenExpiredAddressUI}
      - SubmissionKeyCloakSettings__UseRedirectURL=${SubmissionAPIKeyCloakUseRedirect}
      - SubmissionKeyCloakSettings__RedirectURL=${SubmissionAPIKeyCloakClientUIRedirectURL}
      - AgentSettings__UseTESK=${UseTESK}
      - AgentSettings__UseHutch=${UseHutch}
      - AgentSettings__UseRabbit=${UseRabbit}
      - JobSettings__scanSchedule=${scanSchedule}
      - JobSettings__syncSchedule=${syncSchedule}
      - DataEgressAPISettings__Address=http://DataEgressAPI:80
      - AgentSettings__TESKAPIURL=${TesAPIUrl}
      - AgentSettings__TESKOutputBucketPrefix=${TesOutputBucketPrefix}
      - AgentSettings__TESKInputBucketIP=${TESKInputBucketIP}
      #- AgentSettings__URLHasuraToAdd=${HasuraIP}
      - TreName=${TreName}
      #- AgentSettings__Proxy=true
      #- AgentSettings__ProxyAddresURL=${proxyurl}
      #- AgentSettings__ImageNameToAddToToken=harbor.ukserp.ac.uk/dare-trefx/control-tre-hasura
      - MinioTRESettings__Url=http://minio:9000
      - MinioTRESettings__HutchURLOverride=${HutchMinioURLOverride}
      - MinioTRESettings__AccessKey=${TreMinioAdminUser}
      - MinioTRESettings__SecretKey=${TreMinioAdminPassword}
      - MinioTRESettings__AdminConsole=http://minio:9001
      - MinioSubSettings__Url=${submissionMinioUrl}
      - MinioSubSettings__AccessKey=${MinioRootUser}
      - MinioSubSettings__SecretKey=${MinioRootPass}
      - MinioSubSettings__AdminConsole=${submissionMinioAdminConsole}
      - MinioSubSettings__BucketName=testbucket
      - MinioSubSettings__AWSRegion=us-east-1
      - MinioTRESettings__AWSRegion=us-east-1
      - Hutch__APIAddress=${HutchAPIAddress}
      - Hutch__DbServer=${HutchDbServer}
      - Hutch__DbName=${HutchDbName}
      - Hutch__DbPort=${HutchDbPort}
      #- HasuraSettings__HasuraURL=${HasuraURL}
     # - HasuraSettings__HasuraAdminSecret=${HasuraPass}
      - CredentialAPISettings__StartWebhookUrl=http://192.168.70.70:8086/inbound/StartCredentials
      - CredentialAPISettings__RevokeWebhookUrl=http://192.168.70.70:8086/inbound/RevokeCredentials
      - VaultSettings__BaseUrl=VaultBaseUrl
######################################################
# DataEgress LAYER
######################################################

  DataEgressUI:
    platform: linux/x86_64
    image: harbor.ukserp.ac.uk:443/dare-trefx/control-egress-ui:${dareVer}
    container_name: DataEgressUI
    restart: always
    networks:
      - sub-net
    ports:
      - 8100:80
    depends_on:
      - DataEgressAPI
    environment:
      - DemoMode=${DemoMode}
      - KeyCloakDemoMode=${KeyCloakDemoMode}
      - Serilog__SeqServerUrl=http://seq:5341
      - DataEgressKeyCloakSettings__Authority=${EgressKeyCloakAuthority}
      - DataEgressKeyCloakSettings__MetadataAddress=${EgressKeyCloakMetadataAddress}
      - DataEgressKeyCloakSettings__BaseUrl=${EgressKeyCloakBaseRealmAddress}
      - DataEgressKeyCloakSettings__ClientId=${EgressKeyCloakClientID}
      - DataEgressKeyCloakSettings__ClientSecret=${EgressKeyCloakSecret}
      - DataEgressKeyCloakSettings__ValidAudiences=${EgressValidAudiences}
      - DataEgressKeyCloakSettings__Proxy=${useproxy}
      - DataEgressKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - DataEgressKeyCloakSettings__BypassProxy=treAPI,seq-tre
      - DataEgressKeyCloakSettings__TokenExpiredAddress=${EgressKeyCloakTokenExpiredAddressUI}
      - DataEgressKeyCloakSettings__UseRedirectURL=${EgressKeyCloakUseRedirect}
      - DataEgressKeyCloakSettings__RedirectURL=${EgressKeyCloakClientUIRedirectURL}
      - DataEgressAPISettings__Address=http://DataEgressAPI:80
      - sslcookies=${sslcookies}
      - httpsRedirect=${httpsRedirect}

  DataEgressAPI:
    platform: linux/x86_64
    image: harbor.ukserp.ac.uk:443/dare-trefx/control-egress-api:${dareVer}
    container_name: DataEgressAPI
    restart: always
    networks:
      - sub-net
    ports:
      - 8101:80
    depends_on:
      postgresql:
        condition: service_healthy
      minio:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      - DemoMode=${DemoMode}
      - KeyCloakDemoMode=${KeyCloakDemoMode}
      - DemoModeDefaultP=password123
      - ConnectionStrings__DefaultConnection=Server=postgres;Port=5432;Database=DATA-Egress;Include Error Detail=true;User Id=${PGLOGIN};Password=${PGPASSWORD};TrustServerCertificate=True;
      - RabbitMQ__HostAddress=rabbitmq-tre
      - Serilog__SeqServerUrl=http://seq:5341
      - TreKeyCloakSettings__Authority=${TreAPIKeyCloakAuthority}
      - TreKeyCloakSettings__MetadataAddress=${TreAPIKeyCloakMetadataAddress}
      - TreKeyCloakSettings__BaseUrl=${TreAPIKeyCloakBaseRealmAddress}
      - TreKeyCloakSettings__ClientId=${TreAPIKeyCloakClientId}
      - TreKeyCloakSettings__ClientSecret=${TreAPIKeyCloakSecret}
      - TreKeyCloakSettings__ValidAudiences=${TreAPIValidAudiences}
      - TreKeyCloakSettings__Proxy=${useproxy}
      - TreKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - TreKeyCloakSettings__BypassProxy="treAPI,seq-tre"
      - TreKeyCloakSettings__TokenExpiredAddress=${TreAPIKeyCloakTokenExpiredAddressUI}
      - TreKeyCloakSettings__UseRedirectURL=${TreKeyCloakUseRedirect}
      - TreKeyCloakSettings__RedirectURL=${TreKeyCloakClientUIRedirectURL}
      - DataEgressKeyCloakSettings__Authority=${EgressKeyCloakAuthority}
      - DataEgressKeyCloakSettings__MetadataAddress=${EgressKeyCloakMetadataAddress}
      - DataEgressKeyCloakSettings__BaseUrl=${EgressKeyCloakBaseRealmAddress}
      - DataEgressKeyCloakSettings__ClientId=${EgressKeyCloakClientID}
      - DataEgressKeyCloakSettings__ClientSecret=${EgressKeyCloakSecret}
      - DataEgressKeyCloakSettings__ValidAudiences=${EgressKeyCloakClientID}
      - DataEgressKeyCloakSettings__Proxy=${useproxy}
      - DataEgressKeyCloakSettings__ProxyAddresURL=${proxyurl}
      - DataEgressKeyCloakSettings__BypassProxy="treAPI,seq-tre"
      - DataEgressKeyCloakSettings__TokenExpiredAddress=${EgressKeyCloakTokenExpiredAddressUI}
      - DataEgressKeyCloakSettings__UseRedirectURL=${EgressKeyCloakUseRedirect}
      - MinioSettings__Url=http://minio:9000
      - MinioSettings__AccessKey=${TreMinioAdminUser}
      - MinioSettings__SecretKey=${TreMinioAdminPassword}
      - MinioSettings__BucketName=testbucket
      - MinioSettings__AdminConsole=http://minioIn:9001
      - TreAPISettings__Address=http://treapi:80
      - DataEgressAPISettings__Address=http://DataEgressAPI:8100


######################################################
# Keycloak
######################################################
  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    container_name: keycloak
    environment:

      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres/keycloak
      KC_DB_USERNAME: ${PGLOGIN}
      KC_DB_PASSWORD: ${PGPASSWORD}
      KC_HOSTNAME: ${KeycloakHostName}
      KC_HOSTNAME_PORT: 8085
      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: true
      #KC_HOSTNAME_STRICT: false
      #KC_HOSTNAME_STRICT_HTTPS: false
      KEYCLOAK_FRONTEND_URL: ${KeycloakHostName}/auth
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KEYCLOAK_HEALTH_ENABLED: true
      KEYCLOAK_METRICS_ENABLED: true
      KC_BOOTSTRAP_ADMIN_USERNAME: admin
      KC_BOOTSTRAP_ADMIN_PASSWORD: admin
      # Admin credentials


      # Enable client and user configuration during startup
    networks:
      - sub-net
    command: start-dev  --import-realm #--verbose
    depends_on:
      postgresql:
        condition: service_healthy
    ports:
      - 8085:8080
    volumes:
      - ./realm-config:/opt/keycloak/data/import
    healthcheck:
      test: ["CMD-SHELL", "exec 3<>/dev/tcp/0.0.0.0/9000; echo -e \"GET /health/ready HTTP/1.1\\r\\nHost: localhost\\r\\nConnection: close\\r\\n\\r\\n\" >&3; grep -q '\"status\": \"UP\"' <&3; exec 3<&- 3>&-"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
      #start_interval: 5s


######################################################
# POSTGRES
######################################################
  postgresql:
    platform: linux/x86_64
    image: docker.io/bitnami/postgresql:latest
    container_name: postgres
    restart: always
    environment:
#      - ALLOW_EMPTY_PASSWORD=yes
      - POSTGRESQL_USERNAME=${PGLOGIN}
      - POSTGRESQL_DATABASE=DARE-Control
      - POSTGRESQL_PASSWORD=${PGPASSWORD}
    networks:
      - sub-net
    ports:
      - "5432:5432"
    volumes:
      - 'postgresql_data:/bitnami/postgresql'
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -U ${PGLOGIN} -d ${PGLOGIN}" ]

  adminer:
    image: adminer
    restart: always
    networks:
      - sub-net
    ports:
      - 8087:8080
    environment:
      - ADMINER_DEFAULT_DB_DRIVER=psql
      - ADMINER_DEFAULT_DB_HOST=postgres
      - ADMINER_DEFAULT_DB_NAME=postgres
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "nc", "-z", "adminer", "9000" ]
      timeout: 45s
      interval: 10s
      retries: 10

######################################################
# Rabbit MQ
######################################################

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    hostname: rabbitmq
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - rabbitdata:/var/lib/rabbitmq/
        - rabbitlogs:/var/log/rabbitmq
    networks:
      - sub-net
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3


######################################################
# MINIO
######################################################

  minio:
    image: quay.io/minio/minio:RELEASE.2025-04-22T22-12-26Z
    mem_limit: 512M
    mem_reservation: 256M
    cpus: 0.1
    depends_on:
      keycloak:
        condition: service_healthy
    container_name: minio
    restart: always
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=${MinioRootUser}
      - MINIO_ROOT_PASSWORD=${MinioRootPass}
      - MINIO_BROWSER_REDIRECT_URL=${MinioBrowser}
      #- MINIO_SERVER_URL=${MinioServerApi}
      - MINIO_IDENTITY_OPENID_CONFIG_URL=${MinioTreIdentityConfigURL}
      - MINIO_IDENTITY_OPENID_CLIENT_ID=${MinioTreIdentityID}
      - MINIO_IDENTITY_OPENID_CLIENT_SECRET=${MinioTreOpenidSecret}
      - MINIO_IDENTITY_OPENID_DISPLAY_NAME=SSO_IDENTIFIER
      - MINIO_IDENTITY_OPENID_SCOPES=openid
      - MINIO_IDENTITY_OPENID_REDIRECT_URI_DYNAMIC=on
    networks:
      - sub-net
    volumes:
      - minio_data:/data
    ports:
      - 9002:9000
      - 9003:9001
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5s
######################################################
# SEQ / Serilog
######################################################
  seq:
    platform: linux/x86_64
    image: datalust/seq:2025.1.14095
    container_name: seq
    restart: always
    networks:
      - sub-net
    ports:
      - 5341:80
    volumes:
      - seq_data:/data
    environment:
      - ACCEPT_EULA=Y

######################################################
# Credentials
######################################################

######################################################
# Camunda
######################################################
  TRE-Camunda:
    platform: linux/x86_64
    image: harbor.ukserp.ac.uk:443/dare-trefx/control-tre-camunda:${dareVer}
    container_name: TRECamunda
    restart: always
    networks:
      - sub-net
    ports:
      - 8102:80
    depends_on:
      postgresql:
        condition: service_healthy
      minio:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    environment:
      - ConnectionStrings__CredentialsConnection=Server=postgres;Port=5432;Database=TRE_Credentials;Include Error Detail=true;User Id=${PGLOGIN};Password=${PGPASSWORD};TrustServerCertificate=True;
      - ConnectionStrings__TREPostgresConnection=Server=postgres;Port=5432;Database=tredataInclude Error Detail=true;User Id=${PGLOGIN};Password=${PGPASSWORD};TrustServerCertificate=True;
      - RabbitMQ__HostAddress=rabbitmq-tre
      - Serilog__SeqServerUrl=http://seq:5341
      - ZeebeBootstrap__Client__GatewayAddress=${ZeebeBootstrapGatewayAddress}
      - LdapSettings__host=${LdapSettingsHost}
      - VaultSettings__BaseUrl=${VaultBaseUrl}
      - ProcessModelSettings__ModelDirectory=/5S-TES-Credentials-Models
      - FeatureFlag__EphemeralCredentials=true
    volumes:
      - CamundaModels:/5S-TES-Credentials-Models

  zeebe: # https://docs.camunda.io/docs/self-managed/platform-deployment/docker/#zeebe
    image: camunda/zeebe:${CAMUNDA_PLATFORM_VERSION}
    container_name: zeebe
    ports:
      - "26500:26500"
      - "9600:9600"
    environment: # https://docs.camunda.io/docs/self-managed/zeebe-deployment/configuration/environment-variables/
     - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_CLASSNAME=io.camunda.zeebe.exporter.ElasticsearchExporter
     - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_URL=http://elasticsearch:9200
     # default is 1000, see here: https://github.com/camunda/zeebe/blob/main/exporters/elasticsearch-exporter/src/main/java/io/camunda/zeebe/exporter/ElasticsearchExporterConfiguration.java#L259
     - ZEEBE_BROKER_EXPORTERS_ELASTICSEARCH_ARGS_BULK_SIZE=1
     # allow running with low disk space
     - ZEEBE_BROKER_DATA_DISKUSAGECOMMANDWATERMARK=0.998
     - ZEEBE_BROKER_DATA_DISKUSAGEREPLICATIONWATERMARK=0.999
     - "JAVA_TOOL_OPTIONS=-Xms512m -Xmx512m"
    restart: always
    healthcheck:
     test: [ "CMD-SHELL", "timeout 10s bash -c ':> /dev/tcp/127.0.0.1/9600' && timeout 10s bash -c ':> /dev/tcp/127.0.0.1/26500' || exit 1" ]
     interval: 30s
     timeout: 5s
     retries: 5
     start_period: 60s
    volumes:
     - zeebe:/usr/local/zeebe/data
    networks:
     - camunda-platform
    depends_on:
     - elasticsearch

  operate: # https://docs.camunda.io/docs/self-managed/platform-deployment/docker/#operate
   image: camunda/operate:${CAMUNDA_PLATFORM_VERSION}
   container_name: operate
   ports:
     - "8081:8080"
   environment: #http://localhost:8081/swagger-ui/index.html#/ProcessInstance/byKey_1
     - CAMUNDA_OPERATE_ZEEBE_GATEWAYADDRESS=zeebe:26500
     - CAMUNDA_OPERATE_ELASTICSEARCH_URL=http://elasticsearch:9200
     - CAMUNDA_OPERATE_ZEEBEELASTICSEARCH_URL=http://elasticsearch:9200
     - management.endpoints.web.exposure.include=health
     - management.endpoint.health.probes.enabled=true
   healthcheck:
     test: [ "CMD-SHELL", "wget -O - -q 'http://localhost:8080/actuator/health/readiness'" ]
     interval: 30s
     timeout: 1s
     retries: 5
     start_period: 30s
   networks:
     - camunda-platform
   depends_on:
     - zeebe
     - elasticsearch

  connectors: # https://docs.camunda.io/docs/components/integration-framework/connectors/out-of-the-box-connectors/available-connectors-overview/
   image: camunda/connectors-bundle:${CAMUNDA_CONNECTORS_VERSION}
   container_name: connectors
   ports:
     - "8086:8080"
   environment:
     - ZEEBE_CLIENT_BROKER_GATEWAY-ADDRESS=zeebe:26500
     - ZEEBE_CLIENT_SECURITY_PLAINTEXT=true
     - CAMUNDA_OPERATE_CLIENT_URL=http://operate:8080
     - CAMUNDA_OPERATE_CLIENT_USERNAME=demo
     - CAMUNDA_OPERATE_CLIENT_PASSWORD=demo
     - management.endpoints.web.exposure.include=health
     - management.endpoint.health.probes.enabled=true
   healthcheck:
     test: [ "CMD-SHELL", "curl -f http://localhost:8080/actuator/health/readiness" ]
     interval: 30s
     timeout: 1s
     retries: 5
     start_period: 30s
   networks:
     - camunda-platform
   depends_on:
     - zeebe
     - operate

  elasticsearch: # https://hub.docker.com/_/elasticsearch
   image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
   container_name: elasticsearch
   ports:
     - "9200:9200"
     - "9300:9300"
   environment:
     - bootstrap.memory_lock=true
     - discovery.type=single-node
     - xpack.security.enabled=false
     # allow running with low disk space
     - cluster.routing.allocation.disk.threshold_enabled=false
     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
   ulimits:
     memlock:
       soft: -1
       hard: -1
   restart: always
   healthcheck:
     test: [ "CMD-SHELL", "curl -f http://localhost:9200/_cat/health | grep -q green" ]
     interval: 30s
     timeout: 5s
     retries: 3
   volumes:
     - elastic:/usr/share/elasticsearch/data
   networks:
     - camunda-platform

######################################################
#Vault
######################################################
  vault:
    image: hashicorp/vault:latest
    container_name: vault
    mem_limit: 512M
    mem_reservation: 256M
    cpus: 0.2
    restart: always
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=dev-only-token
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://127.0.0.1:8200
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./vault-config:/vault/config:ro
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD-SHELL", "vault status || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s

######################################################
# VOLUME
######################################################
volumes:
    postgresql_data:
      driver: local
    postgresql_kc:
      driver: local
    minio_data:
      driver: local
    seq_data:
      driver: local
    rabbitdata:
      driver: local
    rabbitlogs:
      driver: local
    keycloak_data:
      driver: local
    data-protection:
      driver: local
    vault_data:
      driver: local
    vault_logs:
      driver: local
    zeebe:
      driver: local
    elastic:
      driver: local
    CamundaModels:
      driver: local
######################################################
# networks
######################################################
networks:
  sub-net:
    driver: bridge
  camunda-platform:
    driver: bridge